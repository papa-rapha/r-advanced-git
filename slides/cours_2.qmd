---
title: "R avancé et introduction à Git"
author: "Raphaël Nedellec"
format: 
  revealjs:
    chalkboard: true
    preview-links: true
    theme: default
knitr:
  opts_chunk: 
    echo: true
    eval: false
    comment: "#>" 
---

# Pourquoi écrire des fonctions ?

## Exemple

Exemple de code : une data.frame contient 4 colonnes de données de températures en degrés C°. On souhaite convertir les degrés Celsius en Farheneit selon la formule $F° = C° * 9 / 5 + 32$.

```{r}
#| code-line-numbers: "|11"

df <- data.frame(
  temp_a = rnorm(20, 2),
  temp_b = rnorm(20, 2),
  temp_c = rnorm(20, 2),
  temp_d = rnorm(20, 2)
)

df$a <- (df$a * 9 / 5) + 32 
df$b <- (df$b * 9 / 5) + 32
df$c <- (df$c * 9 / 5) + 32
df$d <- (df$a * 9 / 5) + 32
```

## Motivation à l'écriture d'une fonction

::: incremental
- Eviter les copier/coller, et les erreurs associées, factoriser le code et réutiliser du code existant
- Faciliter la maintenance et les évolutions du code en un seul endroit
- Faciliter la lecture et la compréhension du code en donnant un nom évocatif
:::

## Syntaxe


```{r}
faire_une_fonction <- function(w, x, y = 1, z = NULL, ...) {
  # commentaire pour les développeurs
  if (!is.null(z)) {
    return(z)
  }
  w + x + y # retourne le résultat de la dernière expression évaluée
}

fonction_sur_une_ligne <- function(x) x + 1
```

. . .

- Les arguments peuvent prendre des valeurs par défaut ;
- on peut écrire une fonction sur une ligne sans `{}` si elle est suffisament simple ;
- lorsque ce n'est pas trivial, il faut expliciter l'instruction de retour avec la fonction `return()`.


## Convertir en fonction {auto-animate="true"}

Ici, combien d'input(s) doit-on définir en entrée de la fonction ?

```{r}
# conversion celsius/farheneit
df$a <- (df$a * 9 / 5) + 32 
```

. . .

**un** seul input doit être défini, correspondant à la variable `df$a`.

. . .

Nommage des fonctions : les fonctions traduisent des actions. Il faut donc utiliser un verbe pour traduire cette action dans le nom. On privilégiera le `snake_case`.

## Convertir en fonction {auto-animate="true"}

Quelle devrait être la nature de l'objet x ? Vecteur ou data.frame ?

```{r}
convert_celsius_to_farheneit <- function(x) {
  
}
```

## Convertir en fonction {auto-animate="true"}

Quelle devrait être la nature de l'objet x ? Vecteur ou data.frame ?

```{r}
convert_celsius_to_farheneit <- function(x) {
  x_farheneit <- (x * 9 / 5) + 32
  return(x_farheneit)
}
```

Il est important de définir les paramètres comme étant les objets minimaux nécessaires à la fonction, donc ici un vecteur plutôt qu'une data.frame.

::: callout-note
## Convertir du code en fonction
`Ctrl+Alt+X` sous Windows, `Control+Option+X` sous Mac.
:::


## Principes de développement

Il faut essayer de suivre certains principes de design de code :

::: incremental
- Limiter le nombre d'arguments à ses fonctions (4 ? ...)
- Utiliser des noms explicites, et des verbes
- Définir des fonctions **pures** dans la philosophie de la *programmation fonctionnelle*.
- Utiliser des objets : S3, S4, R6 ...
:::

. . .

::: callout-note
## Packaging
Nous verrons comment tester, documenter et packager ses fonctions lors du cours n° 3
:::

# Définition d'une fonction

## Les fonctions {auto-animate="true"}

Les fonctions sont des objets.

```{r}
#| eval: true

f <- function(x, y) {
  # commentaire
  x + y
}
```

## Les fonctions {auto-animate="true"}

Les fonctions sont des objets

```{r}
#| eval: true

f <- function(x, y) {
  # commentaire
  x + y
}

body(f) # défini explicitement, code de la fonction
```

. . .

```{r}
#| eval: true

formals(f) # défini explicitement, ses arguments
```

. . .

```{r}
#| eval: true

environment(f) # basé sur où est définie la fonction
```

## 3 types de fonctions {auto-animate="true"}

```{r}
#| eval: false

typeof(mean)
typeof(sum)
typeof(`[`)
```

## 3 types de fonctions {auto-animate="true"}

```{r}
#| eval: true
#| results: hold

typeof(mean)
typeof(sum)
typeof(`[`)
```

. . .

- La plupart des fonctions sont de type `closure`
- Sauf des fonctions spéciales maintenues et écrites par R-core, `builtin` et `special`

## Scope d'une fonction {auto-animate="true"}

```{r}
#| code-line-numbers: "|1-5,7|1-5,8|1-5,9"
x <- 4
y <- 5
f00 <- function(x) {
  return (x + 1)
}

f00(1)
f00(x)
f00(y)
```

## Scope d'une fonction {auto-animate="true"}

```{r}
#| eval: true


x <- 4
y <- 5
f00 <- function(x) {
  return (x + 1)
}

f00(1)
f00(x)
f00(y)
```

## Scope d'une fonction {auto-animate="true"}


```{r}
#| code-line-numbers: "|6,8"
y <- 5
f01 <- function() {
  return (y + 1)
}

print("premier appel", f01())
y <- 10
print("second appel", f01())
```

## Scope d'une fonction {auto-animate="true"}


```{r}
#| eval: true
#| code-line-numbers: "1,6,7,8"
#| results: hold


y <- 5
f01 <- function() {
  return (y + 1)
}

f01()
y <- 10
f01()
```

. . .

La valeur de y est définie au moment de l'exécution, et non au moment de la définition de `f01()`.

## Scope d'une fonction {auto-animate="true"}


```{r}

x <- 3
y <- 5
f02 <- function() {
  x <- 2
  f_in <- function() {
    x + y
  }
  print(environment(f_in))
  f_in()
}

print(environment(f02))
f02()
x <- 5
f02()
```

## Scope d'une fonction {auto-animate="true"}


```{r}
#| eval: true
#| code-line-numbers: "2,4,8,12,13,15"
#| results: hold

x <- 3
y <- 5
f02 <- function() {
  x <- 2
  f_in <- function() {
    x + y
  }
  print(environment(f_in))
  f_in()
}

print(environment(f02))
f02()
x <- 5
f02()
```

## Scope d'une fonction {.smaller}

::: incremental
- Si un nom n'est pas défini dans l'environnement d'une fonction, alors on regarde "un niveau au-dessus", dans l'environnement parent.
- Un nom défini dans l'environnement de la fonction "masque" la valeur d'un objet de même nom défini dans un environnement parent.
- R cherche la valeur quand la fonction est exécutée, non quand la fonction est définie.
- R fait la différence entre les fonctions et les variables.
:::

. . .

::: callout-note
## Quelques conseils
- Ne pas nommer ses variables du même nom qu'une fonction
- Faire des fonctions "pures" et définir les variables utiles dans les paramètres de la fonction
:::

## Arguments {auto-animate="true"}

```{r}
#| eval: false
#| code-line-numbers: "|2|3|4"


f01 <- function(a, b) a + b**2
f01(1, 2)
f01(b = 1, 2)
```

. . .
```{r}
#| include: false
#| eval: true

f01 <- function(a, b) a + b**2
```

- les paramètres non-nommés sont associés à l'argument positionnellement
```{r}
#| eval: true

f01(1, 2)
```

. . .

- il est possible de mélanger les paramètres nommés et non-nommés. Attention à l'ordre de ceux-ci !
```{r}
#| eval: true

f01(b = 1, 2)
```


## Matching partiel {auto-animate="true"}

::: callout-warning
## Matching partiel
En R, les arguments sont identifiés partiellement !
:::

```{r}
#| eval: false
#| error: true
#| code-line-numbers: "|2|3"

f02 <- function(x, xyz, xylophone) x + xylophone**2
f02(1, 2, xylo = 3)
f02(1, 2, xy = 3)
```


## Matching partiel {auto-animate="true"}

::: callout-warning
## Matching partiel 
En R, les arguments sont identifiés partiellement !
:::

```{r}
#| eval: true
#| error: true


f02 <- function(x, xyz, xylophone) x + xylophone**2
f02(1, 2, xylo = 3)
f02(1, 2, xy = 3)
```

. . .

::: callout-note
- Utilisez des arguments nommés si possible
- Essayez de respecter l'ordre des arguments
- Privilégiez le nom exact de l'argument
:::


## ... (dot-dot-dot) {auto-animate="true"}

La notation `...` permet de propager des arguments à une autre fonction. Dans d'autres langages de programmation, on retrouve ce concept de `varargs` soit arguments variables. Ceci permet à la fonction de prendre un nombre variable d'arguments.

```{r}
#| eval: false

f <- function(...) list(...)
f(a = 2, b = "hello")
f(x = c(1, 2, 3))
```

## ... (dot-dot-dot) {auto-animate="true"}

La notation `...` permet de propager des arguments à une autre fonction. Dans d'autres langages de programmation, on retrouve ce concept de `varargs` soit arguments variables. Ceci permet à la fonction de prendre un nombre variable d'arguments.

```{r}
#| eval: true

f <- function(...) list(...)
f(a = 2, b = "hello")
f(x = c(1, 2, 3))
```

## ... (dot-dot-dot)

::: callout-note
Utile pour passer des arguments supplémentaires, en particulier quand un des arguments de la fonction est lui même une fonction, par exemple pour `lapply`
:::

. . .

::: callout-warning
## Quelques points de vigilance
- peut laisser passer des 'typos' sans lever d'erreurs ;
- rend plus difficile la compréhension de ce que fait la fonction et nécessite une documentation précise.
:::

. . .

```{r}
#| eval: true
sapply(list(c(1:10), c(1:10, NA)), mean, na.rm = TRUE)
sapply(list(c(1:10), c(1:10, NA)), mean, na_rm = TRUE)
```

## Output d'une fonction

```{r}
convert_celsius_to_farheneit <- function(x) {
  x_farheneit <- (x * 9 / 5) + 32
  return(x_farheneit)
}
```

. . .

Similaire à :

```{r}
convert_celsius_to_farheneit <- function(x) {
  x_farheneit <- (x * 9 / 5) + 32
  x_farheneit 
} 
```

Une fonction retourne l'objet contenu dans l'appel explicite à `return()` ou le résultat de la dernière expression évaluée de manière implicite.

## Contrôle d'arguments {auto-animate="true"}

C'est une bonne pratique de vérifier des conditions importantes sur les arguments.

```{r}
f04 <- function(x, y) {
  x + y
}
```

## Contrôle d'arguments {auto-animate="true"}

C'est une bonne pratique de vérifier des conditions importantes sur les arguments.

```{r}
f04 <- function(x, y) {
  if (!is.numeric(x)) stop("x not numeric")
  if (!is.numeric(y)) stop("y not numeric")
  x + y
}
f04(1, 2)
f04(1, "a")
```

## Contrôle d'arguments {auto-animate="true"}

C'est une bonne pratique de vérifier des conditions importantes sur les arguments.

```{r}
#| eval: true
#| error: true
f04 <- function(x, y) {
  if (!is.numeric(x)) stop("x not numeric")
  if (!is.numeric(y)) stop("y not numeric")
  x + y
}
f04(1, 2)
f04(1, "a")
```

## Contrôle d'arguments {auto-animate="true"}

C'est une bonne pratique de vérifier des conditions importantes sur les arguments.

```{r}
f04 <- function(x, y) {
  stopifnot(is.numeric(x), is.numeric(y))
  x + y
}
f04(1, 2)
f04(1, "a")
```

## Contrôle d'arguments {auto-animate="true"}

C'est une bonne pratique de vérifier des conditions importantes sur les arguments.

```{r}
#| eval: true
#| error: true
f04 <- function(x, y) {
  stopifnot(is.numeric(x), is.numeric(y))
  x + y
}
f04(1, 2)
f04(1, "a")
```

## Erreurs, avertissements, messages

Trois types de signaux : `errors`, `warning`, `message`. En R, il est possible d'attraper les erreurs ou les messages.

```{r}
?tryCatch
?try
?withCallingHandlers
```


::: callout-note
## Pour aller plus loin
Voir le chapitre sur les conditions dans Advanced-R 
<https://adv-r.hadley.nz/conditions.html#conditions>
:::

## Opérateurs et fonctions spéciales

Quelques fonctions ont un comportement spécial : elles s'écrivent entre les arguments. Exemples, les opérateurs mathématiques :

```{r}
1 + 2
3 * 4
```

On aurait pu écrire :

```{r}
`+`(1, 2)
`*`(3, 4)
```

Liste des fonctions de ce type : `:`, `::`, `:::`, `$`, `@`, `^`, `*`, `/`, `+`, `-`, `>`, `>=`, `<`, `<=`, `==`, `!=`, `!`, `&`, `&&`, `|`, `||`, `~`, `<-`, `->`, `<<-.`, etc.

## Opérateurs et fonctions spéciales

Définir ses propres opérateurs :

```{r}
#| eval: true

`%+%` <- function(lhs, rhs) {
  paste0(lhs, rhs)
}

"hell" %+% "o"
```

. . .

Autres fonctions spéciales :

- `(`, `{`, `[`, `[[`, `next`, `repeat`, `break`, `if`, `for`, `while`, `repeat`, `function` ... 


## Opérateurs et fonctions spéciales : pipe et composition de fonctions

:::: {.columns}
::: {.column width="35%"}

Composition de fonctions :

:::

::: {.column width="65%"}
```{r}
#| eval: true

square <- function(x) x^2
deviation <- function(x) x - mean(x)
x <- runif(100)
# Population standard deviation
sqrt(mean(square(deviation(x)))) 
```
:::
::::

:::: {.columns}
::: {.column width="35%"}

Avec des pipes, `magrittr` ou R base (>4.1) :

:::

::: {.column width="65%"}

```{r}
#| include: false
#| eval: true

library(magrittr)
```


```{r}
#| eval: true
x |> # R base (>4.1)
  deviation() |>
  square() |>
  mean() |>
  sqrt()
x %>% # maggritr
  deviation() %>%
  square() %>% 
  mean() %>%
  sqrt()
```

:::
::::

## Fonctions anonymes

Parfois, il n'est pas nécessaire de choisir d'associer un nom à une fonction, et on peut utiliser des fonctions anonymes.

```{r}
#| eval: true

x <- 1:3
sapply(x, function(x) x**2 - 1)
```

. . .

```{r}
#| eval: true

integrate(function(x) 1 / ((x + 1) * sqrt(x)), lower = 0, upper = Inf)
```

. . .
```{r}
#| eval: true

liste <- list(
  f = function(x) x**2,
  g = \(x) x - 1) # syntaxe possible depuis R > 4.1
liste$f(10)
liste$g(2)
```


# Objets S3 

## Exemple : Date

```{r}
#| eval: true
date_cours <- as.Date("2023-01-13", format = "%Y-%m-%d")
str(date_cours)
typeof(date_cours)
class(date_cours)
attributes(date_cours)
```

Les objets de type `Date` sont de classe `Date`, même si leur représentation interne est `double`^[On s'attend à un entier - nombre de jours depuis une certaine date de référence - mais non-forcé dans la représentation interne].

## Attribut de classe

```{r}
#| eval: true 
x <- 1:10
str(x)
class(x) <- "ma_premiere_classe"
str(x)
class(x)
```

. . .

Un objet S3 est défini par son attribut `class`. R est très permissif.
```{r}
#| eval: true
#| error: true
mod <- lm(log(mpg) ~ log(disp), data = mtcars)
class(mod)
class(mod) <- "Date"
print(mod)
```

## S3

R n'a aucun moyen d'assurer que tous les objets d'une classe aient la même structure. 
Il faut aider l'utilisateur en définissant : 

- un constructeur
- un validateur
- un wrapper user-friendly autour du constructeur si l'objet a vocation à être exposé.

Voir le [chapitre 13.3](https://adv-r.hadley.nz/s3.html#s3-classes) d'Advanced R pour plus de détails et d'informations sur la philosophie des objets S3.

## Fonctions et méthodes génériques

Une classe S3 permet le dispatch de fonctions génériques.

```{r}
# définir une fonction générique :
nouvelle_fonction_generique <- function(x) {
  UseMethod("nouvelle_fonction_generique")
}
```

Fonctions génériques courantes : `print`, `summary`, `plot`...

- Facilite l'apprentissage des APIs des librairies pour les utilisateurs
- Le dispatch permet de gérer l'héritage de classe. R applique la bonne méthode au bon objet.

## Exemple

```{r}
#| eval: true
new_integer <- function(x) {
  stopifnot(is.integer(x))
  structure(x, class = "new_integer") # altern. à `class<-`
}

print.new_integer <- function(x, ...) {
  cat("new_integer object\n")
  r <- range(x, ...)
  cat("min_value: ", r[[1L]], " - max_value: ", r[[2L]], "\n")
  cat(head(x), "......", tail(x), "\n")
  invisible(x)
}

x <- new_integer(1:40L)
print(x)
print(unclass(x)) # le même vecteur sans attribut de classe
```

## Autres paradigmes objets en R

R n'est pas connu pour être un langage de programmation objet. Et pourtant, outre S3, il existe d'autres paradigmes : [S4](https://adv-r.hadley.nz/s4.html), [RC](https://rdocumentation.org/packages/methods/versions/3.6.2/topics/ReferenceClasses), [R6](https://adv-r.hadley.nz/r6.html) ...

- Paradigmes parfois différents des paradigmes courants en Java, Python, etc ;
- S3 doit être le choix par défaut; sa simplicité et flexibilité répond à de nombreux besoins.

# Questions ?


