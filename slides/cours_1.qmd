---
title: "R avancé et introduction à Git"
author: "Raphaël Nedellec"
format: 
  revealjs:
    chalkboard: true
    preview-links: true
    theme: default
knitr:
  opts_chunk: 
    echo: true
    eval: false
    comment: "#>" 
---

# IDE : RStudio

## En résumé :

::: incremental
1.  Utilisez des [projets](https://r4ds.had.co.nz/workflow-projects.html) !
2.  Apprenez les raccourcis claviers (`Alt+Maj+K` sous Windows).
3.  Devenez familier avec votre outil de travail. Le temps investi ne sera pas perdu !
4.  Configurez les options globales.
:::

. . .

::: callout-caution
## Options à configurer recommandées

-   General\>Basic: Restore .RData into workspace at startup: **No**
-   General\>Basic: Save workspace to .RData on exit: **Never**
-   Code\>Saving\>Serialization: Default text encoding: **UTF-8**
:::

# Rappels de R

## Objets

En R, tout est objet.

Un objet est l'association d'un nom et d'une valeur. Techniquement, on associe une valeur à un nom.

. . .

```{r}
nom <- "valeur"
```

. . .

Plusieurs opérateurs pour affecter une valeur :

. . .

```{r}
nom = "valeur"
"valeur" -> nom
```

. . .

Contrainte sur les noms : ils ne peuvent commencer par un `_` ou un chiffre.

## Types primitifs


Il existe 6 types primitifs en R

. . .

`character`, `integer`, `numeric`, `logical`,

```{r}
charactere <- "abcdef"
entier     <- 1L
numerique  <- 1.1
booleen    <- TRUE
```

. . .

ainsi que deux types plus rares, `raw` et `complex`.

. . .

::: callout-warning
Toujours utiliser les valeurs `TRUE` et `FALSE` pour les valeurs logiques, et non les écritures raccourcies `T` et `F`.

```{r}
T <- F # est possible !!
TRUE <- FALSE # error
```
:::

## Types primitifs

Fonctions de coercition de type (*type coercion*) : **as.\***

. . .

```{r}
#| eval: true
as.numeric("1.2")
as.character(2.3)
as.integer(TRUE)
```

. . .

Fonctions d'assertion de type : **is.\***

```{r}
#| eval: true
is.numeric(1.23)
is.numeric(1L)
is.numeric("1.23")
```

## Autres objets importants

Facteur (*`factor`*) :

```{r}
#| eval: true

factor(c("a", "b", "b", "c"), levels = c("a", "b", "c", "d"))
```

. . .

Facteur ordonné (*`ordered`*) :

```{r}
#| eval: true

factor(c("a", "b", "b", "c"), levels = c("a", "b", "c", "d"), ordered = TRUE)
```

. . .

Mais aussi `Date`, `POSIXct`, `POSIXlt`, `data.frame`, `matrix`, `array` ...

## Vecteurs

Les vecteurs sont omniprésents en R. Il en existe deux types :

. . .

-   **atomiques** : `logical`, `integer`, `numeric`, `character`
-   **listes**: `list`

. . .

Les vecteurs peuvent être équipés d'attibuts :

```{r}
vecteur <- 1:4
attr(vecteur, "a") <- "hello"
attr(vecteur, "b") <- "you!"

# ou de manière équivalente
vecteur2 <- structure(
  1:4,
  a = "hello",
  b = "you!"
)
```

## Vecteurs

Pour créer un vecteur de type atomique :

```{r}
vecteur_double     <- c(1, 2.3, 4.5, -6.6)
vecteur_entier     <- c(1L, 2L, 22L)
vecteur_charactere <- c("ceci", "est", "un vecteur")
```

. . .

Pour créer une liste :

```{r}
liste <- list(
  a = c(1, 2.3, 4.5, -6.6),
  b = c(1L, 2L, 22L),
  c = c("ceci", "est", "un vecteur")
)
```

Chaque élément d'une liste peut être d'un type différent, contrairement aux vecteurs atomiques.

## Vecteurs

Certains attributs de vecteurs sont très communs et très importants :

. . .

-   `dim`
-   `names`
-   `class`

. . .

::: callout-tip
## Objets S3

Nous détaillerons la notion d'objets S3 lors du second cours
:::

## Subsetting

::: incremental
-   Il y a **6** façons d'extraire un sous-ensemble (*subsetting*) d'un vecteur atomique.
-   Il y a **3** opérateurs d'extraction d'un sous-ensemble (*subset*), `[[`, `[`, et `$`.
-   Ces opérateurs interagissent différemment avec les différents types de vecteurs : atomiques, listes, facteurs, matrices, data.frames.
-   L'extaction d'un sous-ensemble peut être combinée avec l'assignation.
:::

## Subsetting {auto-animate="true"}

L'opérateur `[` permet de sélectionner plusieurs éléments d'un vecteur.

```{r}
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(1, 3)]
x[-c(1, 3)]
x[c(TRUE, TRUE, FALSE, FALSE)]
x[]
x[0]
x <- setNames(x, c("a", "b", "c", "d"))
x[c("a", "c")]
```

## Subsetting {auto-animate="true"}

L'opérateur `[` permet de sélectionner plusieurs éléments d'un vecteur.

```{r}
#| eval: true
#| results: hold
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(1, 3)]
x[-c(1, 3)]
x[c(TRUE, TRUE, FALSE, FALSE)]
x[]
x[0]
x <- setNames(x, c("a", "b", "c", "d"))
x[c("a", "c")]
```

## Subsetting

Pour des listes :

-   l'opérateur `[` renvoie toujours une liste
-   l'opérateur `[[` renvoie un élément de la liste
-   l'opérateur `$` renvoie un élément de la liste si la liste est nommée

## Subsetting

![](images/list_1.png){fig-align="center"}

. . .

![](images/list_2.png){fig-align="center"}

::: aside
Illustration by Hadley Wickham in [Advanced R](https://adv-r.hadley.nz/subsetting.html#section)
:::

## Subsetting

![](images/list_1.png){fig-align="center"}

. . .

![](images/list_3.png){fig-align="center"}

::: aside
Illustration by Hadley Wickham in [Advanced R](https://adv-r.hadley.nz/subsetting.html#section)
:::

## Control Flow

- Choix : `if`, `else`, `else if`, `ifelse`, `switch`
- Boucles : `for`, `while`, `repeat`
- Opérateurs spéciaux : `next`, `break`

. . .

::: {.callout-note}
## Mots réservés
Tous les noms ci-dessus sont des noms réservés par R et ne peuvent pas être utilisés pour nommer un objet, tout comme `function`, `NA`, `Inf`, etc. Voir `?reserved`.
:::

. . .

::: {.callout-note}
## Programmation fonctionnelle
Nous verrons lors du second cours l'introduction des fonctions \*apply ou map_\* qui sont complémentaires aux boucles `for`.
:::


## Choix

```{r}
# condition: vecteur logique de taille 1
a <- if (condition) 1 else 2
# if / else if / else
if (b == "a") {
  a <- ".."
} else if (b == "b") {
  a <- "autre chose"
} else {
  stop("error")
}
# switch
switch(b,
       a = "..",
       b = "autre chose",
       stop("error"))
# ifelse vectorisé
ifelse(test = c(TRUE, TRUE, FALSE), "a", "b")
```

## Boucles : For 

```{r}
#| eval: true
for (i in 1:3) {
  # ...
  print(i)
}
```

. . .

:::: {.columns}

::: {.column width="60%"}
Contrairement à une croyance répandue, les boucles `for` ne sont pas spécialement lentes. Il faut penser à pré-allouer un vecteur à la taille des résultats attendus.
:::


::: {.column width="40%"}
```{r}
# mauvais
x <- c()
for (k in 1:10) {
  x <- c(x, k)
}

# bon
x <- numeric(10L)
for (k in 1:10) {
  x[[k]] <- k
}
```
:::

::::

## Boucles : `while`, `repeat`, `next`, `break` {auto-animate="true"}

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false

# while : tant que la condition 
# est vraie, on continue
x <- 0L
while (x <= 5L) {
  x <- x + 1L
  if (x %% 2L == 0L) next
  print(x)
}
```

:::


::: {.column width="50%"}
```{r}
#| eval: false

# repeat : autant que nécessaire
x <- 0L
repeat {
  x <- x + 1L
  if (x == 6L) break
  if (x %% 2L == 0L) next
  print(x)
}
```
:::
::::

## Boucles : `while`, `repeat`, `next`, `break` {auto-animate="true"}

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true

# while : tant que la condition 
# est vraie, on continue
x <- 0L
while (x <= 5L) {
  x <- x + 1L
  if (x %% 2L == 0L) next
  print(x)
}
```

:::


::: {.column width="50%"}
```{r}
#| eval: true

# repeat : autant que nécessaire
x <- 0L
repeat {
  x <- x + 1L
  if (x == 6L) break
  if (x %% 2L == 0L) next
  print(x)
}
```
:::
::::

. . .

::: {.callout-tip}
## Tips
- `break` stoppe les itérations
- `next` permet de passer à l'itération suivante
:::

## Fonctions

Les fonctions permettent d'automatiser et de mutualiser des tâches courantes. 

```{r}
#| eval: true
addition <- function(x, y) {
  return(x + y)
}
addition(1, 2)
```


::: {.callout-tip}
## Fonctions, fonctions génériques
Nous détaillerons le fonctionnement et les bonnes pratiques d'écriture des fonctions lors du second cours.
:::

## Librairies

Pour charger une librairie externe, nous utilisons la fonction `library()`

. . .

```{r}
library(dplyr) # chargement explicite de la libraire dplyr
```


::: {.incremental}
- [CRAN](https://cran.r-project.org/) : répertoire et archive historique de la communauté R
- [tidyverse](https://www.tidyverse.org/) : collection de librairies développées par RStudio/Posit
- [rOpenSci](https://ropensci.org/) : consortium pour une science ouverte
:::

. . .

::: {.callout-tip}
## Package
Nous détaillerons comment construire un package lors du troisième cours.
:::

## Librairies

::: {.callout-warning}
## Attention
Attention, tous les packages ne sont pas de qualité égale. Certains peuvent même être potentiellement dangereux et corrompus. Il faut apprendre à détecter des librairies peu fiables.
:::

. . .

::: {.callout-warning}
## L'enfer des dépendances
Les librairies externes facilitent et accélèrent grandement les études, mais créent aussi des vulnérabilités et des dépendances.
:::

. . .

::: {.callout-note}
## Info
Nous nous intéresserons à la gestion propre des dépendances lors du 4ème cours.
:::

# Lire des données

## Fichiers plats (.txt, .csv)

Traditionnellement, les fichiers de données de petite taille sont disponibles au format **.csv** ou **.txt**

```{r}
# base R
read.csv()
read.table()
# R package readr
readr::read_csv()
# autres solutions :
datatable::fread()
vroom::vroom()
```


::: {.callout-warning}
Même s'il est possible d'importer des données directement depuis RStudio, il est primordial de coder les imports pour rendre les études reproductibles.
:::

## Fichiers .json

Format omni-présent sur le web. Permet de représenter des données hiérarchiques.

```{js}
{"employees":[
  { "firstName":"John", "lastName":"Doe" },
  { "firstName":"Anna", "lastName":"Smith" },
  { "firstName":"Peter", "lastName":"Jones" }
]}
```

Pour lire les fichiers json, on utilisera en priorité la librairie [`jsonlite`](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html).

```{r}
library(jsonlite)
read_json("some_json_file.json")
?fromJSON()
?toJSON()
```

Possibilité de lire et écrire du json depuis R.


## Requêter une base de données {auto-animate="true"}

Enfin, de nos jours, beaucoup de données d'analyse résident dans des bases de données, souvent dites relationnelles.

. . .

En R, le backend [`DBI`](https://dbi.r-dbi.org/) a été développé pour fournir une interface unique à de nombreux systèmes de bases de données ou data warehouse existants : mysql, postgresql, snowflake, etc.

. . .

```{r}
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")

dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)

dbDisconnect(con)
```



## Requêter une base de données {auto-animate="true"}
```{r}
#| eval: true


library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")

dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)
dbListFields(con, "mtcars")
```

## Requêter une base de données {auto-animate="true"}
```{r}
#| eval: false
head(dbReadTable(con, "mtcars"))
res <- dbSendQuery(con, "SELECT * from mtcars LIMIT 6")
dbFetch(res)
```

## Requêter une base de données {auto-animate="true"}
```{r}
#| eval: true
head(dbReadTable(con, "mtcars"))
res <- dbSendQuery(con, "SELECT * from mtcars LIMIT 6")
dbFetch(res)
dbClearResult(res)
dbDisconnect(con)
```



# Aide et fonctions utiles

## Documentation R

La fonction la plus importante de R : `?`

```{r}
?help
?str
```

![](images/str.png){fig-align="center"}


Voir aussi [rdocumentation.org](https://rdocumentation.org/packages/utils/versions/3.6.2/topics/str)

## Inspecter un objet R

Fonction `str()`

```{r}
#| eval: true

data(mtcars)
str(mtcars)
```

```{r}
#| eval: true

str(mtcars$mpg)
```

## Demander de l'aide

Si vous rencontrez un problème, il existe avec une très grande probabilité quelqu'un l'ayant déjà rencontré et ayant posté un message sur Internet. Et il est probable que la solution existe aussi !

::: {.incremental}
- [stackoverflow](https://stackoverflow.com/questions/tagged/r?sort=Newest&edited=true) : site de référence pour toute question de programmation
- respecter les personnes susceptibles de vous aider, et utiliser des [exemples](https://reprex.tidyverse.org/articles/reprex-dos-and-donts.html) [reproductibles](https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example/16532098) ([**rep**roducible **ex**amples](https://reprex.tidyverse.org))
:::

## Apprendre à lire un message d'erreur {auto-animate="true"}

```{r}
x <- c(TRUE, FALSE)
if (x) {
  print("hello")
}
```

## Apprendre à lire un message d'erreur {auto-animate="true"}
```{r}
#| eval: true
#| error: true
x <- c(TRUE, FALSE)
if (x) {
  print("hello")
}
```

. . .

Parfois, le message n'est pas très "grand public"

. . . 


```{r}
#| eval: false

data <- data[[0L]]
file <- read.csv("file_which_doesnt_exist.csv")
```

## Apprendre à lire un message d'erreur {auto-animate="true"}

```{r}
#| eval: true
#| error: true
x <- c(TRUE, FALSE)
if (x) {
  print("hello")
}
```

Parfois, le message n'est pas très "grand public"

```{r}
#| eval: true
#| error: true

data <- data[[0L]]
file <- read.csv("file_which_doesnt_exist.csv")
```


::: {.callout-tip}
## Il est normal de faire des erreurs
Toujours prendre le temps de lire le message d'erreur, faire une recherche google associée... 
Un bug arrive rarement et les erreurs sont souvent *stupides* : typo, mauvais nom de variable, etc.
:::


# Bonnes pratiques

## Conventions de codes

- Le code est à destination de l'ordinateur - il doit être interprété par R mais aussi de vos collègues humains. Il faut respecter des conventions.
- Conventions de nommage de variables, de fonctions
- Règles syntaxiques
- Bonnes pratiques

Guide de style de référence : <https://style.tidyverse.org/index.html>

## linter {auto-animate="true"}

Contrôlez la qualité de votre code en utilisant un linter, par exemple, [`lintr`](https://lintr.r-lib.org/)

. . .

```{r}
a=2
b <-2*2
f <- function(a,b) {a+b}
```

. . .

![](images/lintr_2.png){fig-align="center"}

## linter {auto-animate="true"}

Contrôlez la qualité de votre code en utilisant un linter, par exemple, [`lintr`](https://lintr.r-lib.org/)

::: {.callout-note}
## lintr
S'intègre bien avec RStudio, il exite un addin. Le linter est aussi un outil utile pour la vérification automatique de code, notamment dans un processus d'intégration continue. Plus là dessus dans le cours n°5.
:::

## styler {auto-animate="true"}
 
Corrigez automatiquement certaines erreurs de style, avec la librarie [`styler`](https://styler.r-lib.org/)

. . .

```{r}

f<-function(a,b,c) {
#commentaire sans espace
  res= a*b+ c
   res<-res*2
  final= if(TRUE) {res} else {
    "else"}
  return( final)
}

```

## styler {auto-animate="true"}
 
Corrigez automatiquement certaines erreurs de style, avec la librarie [`styler`](https://styler.r-lib.org/)


```{r}

f <- function(a, b, c) {
  # commentaire sans espace
  res <- a * b + c
  res <- res * 2
  final <- if (TRUE) {
    res
  } else {
    "else"
  }
  return(final)
}

```

. . .

::: {.callout-note}
## styler
Complémentaire du linter. Aussi en addin dans RStudio.
:::



# Questions ?
