---
title: "Exercices - Semaine 5"
author: "Raphaël Nedellec"
format: pdf
---



## Exercice : Créer son premier package 

L'objectif de cet exercice sera de créer un package nous permettant de fournir des outils d'analyses des données du répertoire d'analyses des élus. Il consistera principalement à "packager" les fonctions développées lors des exercices des sessions précédentes.

**Setup**

1. Installez le package `devtools`.
2. Dans une nouvelle session R, créer un nouveau projet de package intitulé que vous appelerez `firstlib-<name>`; vous replacerez `<name>` par votre nom, en utilisant la fonction `create_package` de la librairie `usethis`. Pourquoi n'est-il pas nécessaire d'installer explicitement `usethis` ?

3. Configurez un nouveau projet sous github qui s'appelera `firstlib-<name>`. En utilisant l'instruction `git remote add`, configurez le remote origin en conséquence.

**Fonctions**

4. Récupérez les fonctions préalablement implémentées lors de la session 3 :
- `compter_nombre_d_adjoints()`
- `trouver_l_elu_le_plus_age()`
- `calcul_distribution_age()`
- `plot_code_professions()`
- `summary.commune()`
- `summary.departement()`
- `plot.commune()`
- `plot.departement()`

Pour chacunes de ces fonctions, documentez et renseignez les dépendances en utilisant les notations Roxygen. Soyez particulièrement attentifs à la déclaration des dépendances, si vous utilisez des librairies tierces pour réaliser vos calculs.


**Data**

5. Téléchargez les jeux de données associés à la session 5. Chargez les données en utilisant la fonction `readr::read_delim`. En utilisant la fonction `use_data` de la librairie `usethis`, assurez-vous que les données sont rendues disponibles dans la librairie. Documentez le jeu de données [comme décrit ici](https://r-pkgs.org/data.html#sec-documenting-data).

**Tests**

6. En utilisant `testthat`, écrivez des tests unitaires pour chacune des fonctions précédentes. Vous écrirez 2 tests unitaires par fonction. Essayez de tester soit la validité des arguments fournis en entrée, soit la pertinence des résultats pour un jeu de données fixé en entrée.

**Documentation**

7. Une fois les fonctions documentées avec Roxygen, générez la documentation en utilisant la fonction `devtools::document()`. Assurez-vous que les fonctions sont bien documentées en utilisant la fonction `devtools::load_all()`, puis en consultant l'aide de la fonction, par exemple `?compter_nombre_d_adjoints`.

**Description**

8. Editez le fichier DESCRIPTION en renseignant les champs obligatoires:
- Nom et description du package
- Nom de l'auteur
- Dépendances (section `imports` et `suggests` si nécessaire)

**Installation**

9. Assurez-vous d'avoir votre banche à jour, et réalisez un commit/push vers le répertoire distant. 
10. Redémarrez une nouvelle session R. En utilisant la fonction `remotes::install_github("<username_github>/<nom_du_repo_github>")`, installez votre package depuis le répertoire distant, et chargez le en utilisant l'instruction `library()`. Cela marche-t-il comme attendu ?

Félicitations, vous avez construit votre premier package !